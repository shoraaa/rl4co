[project]
name = "rl4co"
version = "0.6.0"
description = "RL4CO: an Extensive Reinforcement Learning for Combinatorial Optimization Benchmark"
authors = [
    { name = "Federico Berto", email = "berto.federico2@gmail.com" },
    { name = "Chuanbo Hua", email = "cbhua@kaist.ac.kr" },
    { name = "Junyoung Park", email = "junyoungpark.ml@gmail.com" },
    { name = "Laurin Luttmann", email = "laurin.luttmann@gmail.com" },
    { name = "Yining Ma" },
    { name = "Fanchen Bu" },
    { name = "Jiarui Wang" },
    { name = "Haoran Ye" },
    { name = "Minsu Kim" },
    { name = "Sanghyeok Choi" },
    { name = "Zepeda Gast" },
    { name = "Andre Hottung" },
    { name = "Jianan Zhou" },
    { name = "Jieyi Bi" },
    { name = "Yu Hu" },
    { name = "Fei Liu" },
    { name = "Hyeonah Kim" },
    { name = "Jiwoo Son" },
    { name = "Haeyeon Kim" },
    { name = "Davide Angioni" },
    { name = "Wouter Kool" },
    { name = "Zhiguang Cao" },
    { name = "Jie Zhang" },
    { name = "Kijung Shin" },
    { name = "Cathy Wu" },
    { name = "Sungsoo Ahn" },
    { name = "Guojie Song" },
    { name = "Changhyun Kwon" },
    { name = "Lin Xie" },
    { name = "Jinkyoo Park" },
    { name = "AI4CO" },
]
requires-python = ">=3.10"
readme = "README.md"
license = "MIT"
keywords = [
    "reinforcement learning",
    "combinatorial optimization",
    "benchmark",
]
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "einops",
    "hydra-core",
    "hydra-colorlog",
    "lightning>=2.1.0",
    "matplotlib",
    "omegaconf",
    "pyrootutils",
    "rich",
    "robust-downloader",
    "scipy",
    "tensordict>=0.6.0",
    "torchrl>=0.6.0",
    "wandb",
]

[project.optional-dependencies]
dev = [
    "black",
    "pre-commit>=3.3.3",
    "ruff",
    "pytest",
    "pytest-cov",
    "pytest-xdist>=3.7.0",
]
graph = [
    "torch_geometric"
]
routing = [
    "numba>=0.58.1",
    "pyvrp>=0.9.0 ; python_version < '4.0'",
]
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings-python",
    "mike",
    "mkdocs-jupyter",
    "mkdocs-redirects",
    "mkdocs-autolinks-plugin",
    "griffe-typingdoc",
    "griffe-inherited-docstrings",
    "griffe",
    "black",
    "mkdocs-same-dir",
    "mdx-breakless-lists",
    "mdx-truly-sane-lists",
    "markdown-gfm-admonition",
]

[project.urls]
Homepage = "https://rl4.co"
Repository = "https://github.com/ai4co/rl4co"
Documentation = "https://rl4co.readthedocs.io"
Tracker = "https://github.com/ai4co/rl4co/issues"

[tool.hatch.build.targets.sdist]
include = ["rl4co"]

[tool.hatch.build.targets.wheel]
include = ["rl4co"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 90
target-version = ["py311"]
include = '\.pyi?$'
exclude = '''
(
  /(
      \.direnv
    | \.eggs
    | \.git
    | \.tox
    | \.venv
    | _build
    | build
    | dist
    | venv
  )/
)
'''

[tool.ruff]
select = ["F", "E", "W", "I001"]
line-length = 90
show-fixes = false
target-version = "py311"
task-tags = ["TODO", "FIXME"]
ignore = ["E501"] # never enforce `E501` (line length violations), done in Black

[tool.ruff.per-file-ignores]
"__init__.py" = ["E402", "F401"]

[tool.ruff.isort]
known-first-party = []
known-third-party = []
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
combine-as-imports = true
split-on-trailing-comma = false
lines-between-types = 1

[tool.coverage]
include = ["rl4co.*"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    # Lines to exclude from coverage report (e.g., comments, debug statements)
    "pragma: no cover",
    "if __name__ == .__main__.:",
]
